import requests
import json
import pandas as pd
import sys
from datetime import datetime, timedelta
pd.set_option('display.max_columns', None)
# Get UN and PW from file
whoop_config = pd.read_csv("../whoop.config")
# API URL for Reference
api_url = "https://api-7.whoop.com"
# Get the Refresh Token
refresh = requests.post(
url = f"{api_url}/oauth/token",
headers = {
"Content-Type": "application/json; charset=utf-8",
},
data = json.dumps({
"username": whoop_config["username"][0],
"password": whoop_config["password"][0],
"issueRefresh": True,
"grant_type": "password"
})
)
refresh_token = refresh.json()['refresh_token']
# Get the access token
response = requests.post(
url = f"{api_url}/oauth/token",
headers = {
"Content-Type": "application/json; charset=utf-8",
},
data=json.dumps({
"grant_type": "refresh_token",
"refresh_token": refresh_token
})
)
# Access token, user id, and start of this jawn
access_token = response.json()['access_token']
user_id = response.json()['user']['id']
earliest = response.json()['user']['createdAt']
latest = (datetime.today() + timedelta(days = 1)).strftime('%Y-%m-%dT00:00:00.000Z')
# create a session
s = requests.Session()
s.headers.update({
'Content-Type': 'application/json; charset=utf-8',
'Authorization': f'Bearer {access_token}',
})
offset = 0
total_count = sys.maxsize
records = []
while offset < total_count:
response = s.get(
url=f'{api_url}/activities-service/v1/cycles/aggregate/range/{user_id}',
params={
'startTime': earliest,
'endTime': latest,
'limit': 50,
'offset': offset
})
if response.status_code != 200:
break
records.extend(response.json()['records'])
offset = response.json()['offset']
total_count = response.json()['total_count']
cycles = pd.DataFrame()
sleeps = pd.DataFrame()
recovery = pd.DataFrame()
workouts = pd.DataFrame()
records
records[1]
records[2]
response
response.json()
response = s.get(
)
response = s.get(
url=f'{api_url}/activities-service/v1/workouts/',
params={
'startTime': earliest,
'endTime': latest
})
response
response.json()
# create a session
s = requests.Session()
s.headers.update({
'Content-Type': 'application/json; charset=utf-8',
'Authorization': f'Bearer {access_token}',
})
response = s.get(
url=f'{api_url}/activities-service/v1/workouts/',
params={
'startTime': earliest,
'endTime': latest,
'limit': 50,
'offset': offset
})
response.json()
quit()
library(lubridate)
library(readr)
library(dplyr)
library(stringr)
library(zoo)
## LOOK BACK 7 DAYS AND PLAN THE NEXT 7
range_start <- Sys.Date() - days(7)
range_end <- Sys.Date() + days(7)
# What have I done already?
tracked <- c("Weightlifting",
"Soccer",
"Running",
"Walking",
"Cycling",
"Sauna")
# GET THE WORKOUTS DATA
source("02_hk_data_functions.R")
workouts <- get_workouts_data() %>%
filter(date >= range_start)
last_workout <- get_avg_workouts_data(get_workouts_data(), condensed = TRUE)
last_workout
tracked <- c("Weightlifting",
"Soccer",
"Running",
"Walking",
"Spin")
# GET THE WORKOUTS DATA
source("02_hk_data_functions.R")
workouts <- get_workouts_data() %>%
filter(date >= range_start)
last_workout <- get_avg_workouts_data(get_workouts_data(), condensed = TRUE) %>%
filter(name %in% tracked)
last_workout
workout_sum <- workouts %>%
group_by(name) %>%
summarise(num_efforts = length(name),
last_effort = max(date))
workout_sum
workout_dates <- workouts %>%
group_by(date) %>%
summarise(workouts_completed = paste0(name, collapse = " + "))
workout_dates
workout_sum <- workouts %>%
group_by(name) %>%
summarise(num_efforts = length(name),
last_effort = max(date)) %>%
mutate(days_since_last = Sys.Date() - last_effort)
workout_sum
reticulate::repl_python()
