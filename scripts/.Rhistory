from datetime import datetime, timedelta
from dateutil import tz
import pandas as pd
from googleapiclient.discovery import build
from google.oauth2 import service_account
# If modifying these scopes, delete the file token.json.
SCOPES = ['https://www.googleapis.com/auth/calendar.readonly',
'https://www.googleapis.com/auth/calendar.events.readonly']
SERVICE_ACCOUNT_FILE = '../extended-line-362920-d1d2ea37dd97.json'
credentials = service_account.Credentials.from_service_account_file(
SERVICE_ACCOUNT_FILE,
scopes = SCOPES)
delegated_credentials = credentials.with_subject('jake@rleanalytics.com')
service = build('calendar', 'v3', credentials = delegated_credentials)
# Get the list of calendars available
cal_list = service.calendarList().list().execute()
calendars = pd.json_normalize(cal_list.get('items', []))['id']
# Get today's events
today = datetime.utcnow().date()
start = datetime(today.year, today.month, today.day,
tzinfo = tz.gettz('America/New_York'))
end = start + timedelta(days = 1)
start = start.isoformat()
end = end.isoformat()
all_events = pd.DataFrame()
calendars
cal = "jake.rozran@civicactions.com"
events_result = service.events().list(calendarId = cal,
timeMin = start,
timeMax = end,
maxResults = 25,
singleEvents = True,
orderBy = 'startTime').execute()
events = pd.json_normalize(events_result.get('items', []))
events
len(events) > 0
attendees = events.attendees
resStat = []
for event in range(len(attendees)):
for att in range(len(attendees[event])):
if attendees[event][att]['email'] == cal:
resStat.append(attendees[event][att]['responseStatus'])
break
resStat
for cal in calendars:
events_result = service.events().list(calendarId = cal,
timeMin = start,
timeMax = end,
maxResults = 25,
singleEvents = True,
orderBy = 'startTime').execute()
events = pd.json_normalize(events_result.get('items', []))
if(len(events) > 0):
attendees = events.attendees
resStat = []
for event in range(len(attendees)):
for att in range(len(attendees[event])):
if attendees[event][att]['email'] == cal:
resStat.append(attendees[event][att]['responseStatus'])
break
events = events[['summary', 'start.dateTime', 'end.dateTime']]
events['response'] = resStat
events['calendar'] = cal
all_events = pd.concat([all_events, events], ignore_index = True)
cal
calendars
cal_list
calendars.dtype
type(calendares)
type(calendars)
calendars = calendars[calendars != "en.usa#holiday@group.v.calendar.google.com"]
calendars
from datetime import datetime, timedelta
from dateutil import tz
import pandas as pd
from googleapiclient.discovery import build
from google.oauth2 import service_account
# If modifying these scopes, delete the file token.json.
SCOPES = ['https://www.googleapis.com/auth/calendar.readonly',
'https://www.googleapis.com/auth/calendar.events.readonly']
SERVICE_ACCOUNT_FILE = '../extended-line-362920-d1d2ea37dd97.json'
credentials = service_account.Credentials.from_service_account_file(
SERVICE_ACCOUNT_FILE,
scopes = SCOPES)
delegated_credentials = credentials.with_subject('jake@rleanalytics.com')
service = build('calendar', 'v3', credentials = delegated_credentials)
# Get the list of calendars available
cal_list = service.calendarList().list().execute()
calendars = pd.json_normalize(cal_list.get('items', []))['id']
calendars = calendars[calendars != "en.usa#holiday@group.v.calendar.google.com"]
# Get today's events
today = datetime.utcnow().date()
start = datetime(today.year, today.month, today.day,
tzinfo = tz.gettz('America/New_York'))
end = start + timedelta(days = 1)
start = start.isoformat()
end = end.isoformat()
all_events = pd.DataFrame()
for cal in calendars:
events_result = service.events().list(calendarId = cal,
timeMin = start,
timeMax = end,
maxResults = 25,
singleEvents = True,
orderBy = 'startTime').execute()
events = pd.json_normalize(events_result.get('items', []))
if(len(events) > 0):
attendees = events.attendees
resStat = []
for event in range(len(attendees)):
for att in range(len(attendees[event])):
if attendees[event][att]['email'] == cal:
resStat.append(attendees[event][att]['responseStatus'])
break
events = events[['summary', 'start.dateTime', 'end.dateTime']]
events['response'] = resStat
events['calendar'] = cal
all_events = pd.concat([all_events, events], ignore_index = True)
all_events
# Source Libraries Script
source("01_hkv2_libraries.R")
# Refresh Data
system("/bin/bash 02_hkv2_data_refresh.sh")
source("03_01_hkv2_event_data_functions.R")
# GET EVENTS DATA
events <- get_events_data()
wo_window_num <- get_wo_windows_num(events)
wo_windows <- get_wo_windows(events)
events
events <- read_csv("../data/calendar_events.csv")
dim(events)[1] > 0
events <- events %>%
filter(response != "declined") %>%
mutate(length = difftime(end.dateTime, start.dateTime, units = "mins"),
start.dateTime = start.dateTime - hours(4),
end.dateTime = end.dateTime - hours(4)) %>%
rename(start = start.dateTime,
end = end.dateTime,
event = summary) %>%
select(event,
start,
end,
length,
calendar)
events
# Source Libraries Script
source("01_hkv2_libraries.R")
# Refresh Data
system("/bin/bash 02_hkv2_data_refresh.sh")
source("03_01_hkv2_event_data_functions.R")
# GET EVENTS DATA
events <- get_events_data()
wo_window_num <- get_wo_windows_num(events)
wo_windows <- get_wo_windows(events)
events
wo_window_num
wo_windows
events <- read_csv("../data/calendar_events.csv")
events
events
events <- events %>%
filter(response != "declined") %>%
mutate(length = difftime(end.dateTime, start.dateTime, units = "mins"),
start.dateTime = start.dateTime - hours(4),
end.dateTime = end.dateTime - hours(4)) %>%
rename(start = start.dateTime,
end = end.dateTime,
event = summary) %>%
select(event,
start,
end,
length,
calendar)
events
events <- read_csv("../data/calendar_events.csv")
events <- events %>%
filter(response != "declined") %>%
mutate(length = difftime(end.dateTime, start.dateTime, units = "mins"),
start.dateTime = start.dateTime - hours(4),
end.dateTime = end.dateTime - hours(4),
covered = FALSE) %>%
rename(start = start.dateTime,
end = end.dateTime,
event = summary) %>%
select(event,
start,
end,
length,
covered,
calendar)
for (eve in events$event) {
this_start <- events$start[events$event == eve]
this_end <- events$end[events$event == eve]
for (next_eve in events$event) {
if (eve == next_eve) {
next
}
next_start <- events$start[events$event == next_eve]
next_end <- events$end[events$event == next_eve]
if (this_start <= next_start & this_end >= next_end) {
events$covered[events$event == next_eve] <- TRUE
}
}
}
events
# Refresh Data
system("/bin/bash 02_hkv2_data_refresh.sh")
reticulate::repl_python()
