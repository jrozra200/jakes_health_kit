filter(as_date(datetime) == Sys.Date())
wo_message <- paste0("You have soccer tonight with ", soccer$team[1], " at ",
format(soccer$datetime[1], "%I:%M %p"), " on field ",
soccer$field[1], ".")
if (grepl("\\+ Walk", todays_wo)) {
wo_message <- paste0(wo_message, "\n\nYou also have ", wo_window_num,
" window(s) long enough to get your walk in today.",
"\n\nTry to get your walk in during these windows:",
wo_windows, ".\n\n")
}
} else {
wo_message <- paste0("You have ", wo_window_num, " window(s) long enough ",
"to get your workout in today.\n\nTry to get your time ",
"in during these windows:", wo_windows, ".\n\n")
if (grepl("\\+ Walk", todays_wo)) {
wo_message <- paste0(wo_message, "\n\nDon't forget... you also have to ",
"get your walk with Poppy in today.")
}
}
return(wo_message)
}
wo_message <- get_wo_message(todays_wo, wo_window_num, wo_windows)
wo_message
# LIBRARIES
source("01_hk_libraries.R")
# DATA REFRESH
system("python whoop.py")
# system("Rscript --vanilla rules.R")
system("python get_events.py")
# RENPHO
# EIGHT SLEEP
# STRAVA
# HEADSPACE
# DATA SOURCE FUNCTIONS
source("02_hk_data_functions.R")
# PLOT FUNCTIONS
source("03_hk_plot_functions.R")
# TABLE FUNCTIONS
source("04_hk_table_functions.R")
# GET EVENTS DATA
events <- get_events_data()
wo_window_num <- get_wo_windows_num(events)
wo_windows <- get_wo_windows(events)
# GET WORK OUT DATA
# wo <- get_wo_schedule_data()
todays_wo <- get_todays_wo()
todays_status <- get_category_sum_data(get_workout_dates_data(),
NUM_CARDIO,
NUM_MUSCULAR,
NUM_NON,
NUM_RESTORE)
workout_dates %>%
summarise(restorative = sum(category_restore),
cardiovascular = sum(category_cardio),
`non-cardiovascular` = sum(category_non),
muscular = sum(category_muscular))
workout_dates <- get_workouts_data() %>%
filter(date >= range_start) %>%
left_join(get_sports(), by = "name") %>%
mutate(new_cat = str_sub(category, 1, 5)) %>%
group_by(date) %>%
summarise(workouts_completed = paste0(name, collapse = " + "),
category = paste0(new_cat, collapse = " + "),
act_strain = sum(raw_intensity_score)) %>%
full_join(get_cycles_data(), by = c("date" = "date")) %>%
filter(date >= range_start &
date <= Sys.Date() - days(1)) %>%
select(date, workouts_completed, category, act_strain, day_strain) %>%
mutate(workouts_completed = ifelse(is.na(workouts_completed),
"Other - Recovery",
workouts_completed),
category = ifelse(is.na(category),
str_sub("restorative", 1, 5),
category),
day_strain = ifelse(is.na(day_strain), 0, day_strain * 1000),
avg_strain = last_30_day_ma(get_cycles_data(),
"day_strain",
"date",
range_start,
Sys.Date() - days(1)) * 1000,
over_avg = ifelse(day_strain >= avg_strain, 1, -1),
plus_minus = cumsum(over_avg),
category_restore = case_when(
workouts_completed == "Walking" & act_strain < 1 ~ TRUE,
category == "resto" ~ TRUE,
1 == 1 ~ FALSE),
category_muscular = ifelse(grepl("muscu", category), TRUE, FALSE),
category_cardio = ifelse(grepl("cardi", category),
TRUE, FALSE),
category_non = ifelse(grepl("non-c", category) &
!(workouts_completed == "Walking" &
act_strain < 1), TRUE, FALSE))
setwd("scripts")
workout_dates <- get_workouts_data() %>%
filter(date >= range_start) %>%
left_join(get_sports(), by = "name") %>%
mutate(new_cat = str_sub(category, 1, 5)) %>%
group_by(date) %>%
summarise(workouts_completed = paste0(name, collapse = " + "),
category = paste0(new_cat, collapse = " + "),
act_strain = sum(raw_intensity_score)) %>%
full_join(get_cycles_data(), by = c("date" = "date")) %>%
filter(date >= range_start &
date <= Sys.Date() - days(1)) %>%
select(date, workouts_completed, category, act_strain, day_strain) %>%
mutate(workouts_completed = ifelse(is.na(workouts_completed),
"Other - Recovery",
workouts_completed),
category = ifelse(is.na(category),
str_sub("restorative", 1, 5),
category),
day_strain = ifelse(is.na(day_strain), 0, day_strain * 1000),
avg_strain = last_30_day_ma(get_cycles_data(),
"day_strain",
"date",
range_start,
Sys.Date() - days(1)) * 1000,
over_avg = ifelse(day_strain >= avg_strain, 1, -1),
plus_minus = cumsum(over_avg),
category_restore = case_when(
workouts_completed == "Walking" & act_strain < 1 ~ TRUE,
category == "resto" ~ TRUE,
1 == 1 ~ FALSE),
category_muscular = ifelse(grepl("muscu", category), TRUE, FALSE),
category_cardio = ifelse(grepl("cardi", category),
TRUE, FALSE),
category_non = ifelse(grepl("non-c", category) &
!(workouts_completed == "Walking" &
act_strain < 1), TRUE, FALSE))
range_start <- Sys.Date() - days(6)
workout_dates <- get_workouts_data() %>%
filter(date >= range_start) %>%
left_join(get_sports(), by = "name") %>%
mutate(new_cat = str_sub(category, 1, 5)) %>%
group_by(date) %>%
summarise(workouts_completed = paste0(name, collapse = " + "),
category = paste0(new_cat, collapse = " + "),
act_strain = sum(raw_intensity_score)) %>%
full_join(get_cycles_data(), by = c("date" = "date")) %>%
filter(date >= range_start &
date <= Sys.Date() - days(1)) %>%
select(date, workouts_completed, category, act_strain, day_strain) %>%
mutate(workouts_completed = ifelse(is.na(workouts_completed),
"Other - Recovery",
workouts_completed),
category = ifelse(is.na(category),
str_sub("restorative", 1, 5),
category),
day_strain = ifelse(is.na(day_strain), 0, day_strain * 1000),
avg_strain = last_30_day_ma(get_cycles_data(),
"day_strain",
"date",
range_start,
Sys.Date() - days(1)) * 1000,
over_avg = ifelse(day_strain >= avg_strain, 1, -1),
plus_minus = cumsum(over_avg),
category_restore = case_when(
workouts_completed == "Walking" & act_strain < 1 ~ TRUE,
category == "resto" ~ TRUE,
1 == 1 ~ FALSE),
category_muscular = ifelse(grepl("muscu", category), TRUE, FALSE),
category_cardio = ifelse(grepl("cardi", category),
TRUE, FALSE),
category_non = ifelse(grepl("non-c", category) &
!(workouts_completed == "Walking" &
act_strain < 1), TRUE, FALSE))
workout_dates
workout_dates
# LIBRARIES
source("01_hk_libraries.R")
# DATA REFRESH
system("python whoop.py")
# system("Rscript --vanilla rules.R")
system("python get_events.py")
# RENPHO
# EIGHT SLEEP
# STRAVA
# HEADSPACE
# DATA SOURCE FUNCTIONS
source("02_hk_data_functions.R")
# PLOT FUNCTIONS
source("03_hk_plot_functions.R")
# TABLE FUNCTIONS
source("04_hk_table_functions.R")
# GET EVENTS DATA
events <- get_events_data()
wo_window_num <- get_wo_windows_num(events)
wo_windows <- get_wo_windows(events)
# GET WORK OUT DATA
# wo <- get_wo_schedule_data()
todays_wo <- get_todays_wo()
todays_status <- get_category_sum_data(get_workout_dates_data(range_start),
NUM_CARDIO,
NUM_MUSCULAR,
NUM_NON,
NUM_RESTORE)
wo_message <- get_wo_message(todays_wo, wo_window_num, wo_windows)
# GET CYCLES DATA
cycles <- get_cycles_data()
cycles_plot <- get_cycles_plot_data(cycles)
todays_strain_exp <- get_todays_strain_exp_data(cycles_plot)
# GET RECOVERY DATA
recovery <- get_recovery_data()
mean_rhr <- last_30_day_mean(recovery, "resting_heart_rate")
mean_hrv <- last_30_day_mean(recovery, "hrv_rmssd")
mean_st <- last_30_day_mean(recovery, "skin_temp_f")
mean_spo2 <- last_30_day_mean(recovery, "spo2")
# GET WORKOUTS DATA
workouts <- get_workouts_data()
avg_workout <- get_avg_workouts_data(workouts, TRUE)
avg_workout_long <- get_avg_workouts_data(workouts)
todays_workouts <- get_todays_workout_data(workouts)
# GET SLEEP DATA
sleep <- get_sleep_data()
data <- recovery
yvar <- "resting_heart_rate"
date_var <- "date"
title <- "Resting Heart Rate"
# Get the 30 day ma
mean_var <- data %>%
mutate(shift_yvar = lead(get(yvar), 1),
ma_30 = rollmean(shift_yvar,
30,
fill = NA,
na.rm = TRUE,
align = "left"),
uq_30 = rollapply(shift_yvar,
width = 30,
align = "left",
fill = NA,
FUN = quantile,
probs = 0.95,
na.rm = TRUE),
lq_30 = rollapply(shift_yvar,
width = 30,
align = "left",
fill = NA,
FUN = quantile,
probs = 0.05,
na.rm = TRUE)) %>%
head(10) %>%
select(date,
lq_30,
ma_30,
uq_30)
mean_var
data <- data %>%
left_join(mean_var, by = "date")
data
mean_mean_var <- mean(mean_var$ma_30)
mean_mean_var
# Calculate the ranges for the plot
range_data <- tibble(minimum = min(c(data[1:10, yvar],
data$lq_30[1:10])),
maxiumum = max(c(data[1:10, yvar],
data$uq_30[1:10]))) %>%
mutate(ll = minimum - ((maximum - minimum) / 6),
ul = maximum + ((maximum - minimum) / 6),
label_pos = minimum - ((maximum - minimum) / 12),
label_bump = (maximum - minimum) * 0.05)
range_data
tibble(minimum = min(c(data[1:10, yvar],
data$lq_30[1:10])),
maxiumum = max(c(data[1:10, yvar],
data$uq_30[1:10])))
data[1:10, yvar]
data$lq_30[1:10]
as.numeric(data$lq_30[1:10])
as.numeric(data[1:10, yvar])
ata %>% head(1:10) %>% pull(get(yvar)))
data %>% head(1:10) %>% pull(get(yvar))
data %>% head(10) %>% pull(get(yvar))
min(c(data %>% head(10) %>% pull(get(yvar)),
as.numeric(data$lq_30[1:10])))
# Calculate the ranges for the plot
range_data <- tibble(minimum = min(c(data %>% head(10) %>% pull(get(yvar)),
as.numeric(data$lq_30[1:10]))),
maxiumum = max(c(data %>% head(10) %>% pull(get(yvar)),
data$uq_30[1:10]))) %>%
mutate(ll = minimum - ((maximum - minimum) / 6),
ul = maximum + ((maximum - minimum) / 6),
label_pos = minimum - ((maximum - minimum) / 12),
label_bump = (maximum - minimum) * 0.05)
# Calculate the ranges for the plot
range_data <- tibble(minimum = min(c(data %>% head(10) %>% pull(get(yvar)),
as.numeric(data$lq_30[1:10]))),
maximum = max(c(data %>% head(10) %>% pull(get(yvar)),
data$uq_30[1:10]))) %>%
mutate(ll = minimum - ((maximum - minimum) / 6),
ul = maximum + ((maximum - minimum) / 6),
label_pos = minimum - ((maximum - minimum) / 12),
label_bump = (maximum - minimum) * 0.05)
range_data
60 * 0.15
# LIBRARIES
source("01_hk_libraries.R")
# DATA REFRESH
system("python whoop.py")
# system("Rscript --vanilla rules.R")
system("python get_events.py")
# RENPHO
# EIGHT SLEEP
# STRAVA
# HEADSPACE
# DATA SOURCE FUNCTIONS
source("02_hk_data_functions.R")
# PLOT FUNCTIONS
source("03_hk_plot_functions.R")
# TABLE FUNCTIONS
source("04_hk_table_functions.R")
# GET EVENTS DATA
events <- get_events_data()
wo_window_num <- get_wo_windows_num(events)
wo_windows <- get_wo_windows(events)
# GET WORK OUT DATA
# wo <- get_wo_schedule_data()
todays_wo <- get_todays_wo()
todays_status <- get_category_sum_data(get_workout_dates_data(range_start),
NUM_CARDIO,
NUM_MUSCULAR,
NUM_NON,
NUM_RESTORE)
wo_message <- get_wo_message(todays_wo, wo_window_num, wo_windows)
# GET CYCLES DATA
cycles <- get_cycles_data()
cycles_plot <- get_cycles_plot_data(cycles)
todays_strain_exp <- get_todays_strain_exp_data(cycles_plot)
# GET RECOVERY DATA
recovery <- get_recovery_data()
mean_rhr <- last_30_day_mean(recovery, "resting_heart_rate")
mean_hrv <- last_30_day_mean(recovery, "hrv_rmssd")
mean_st <- last_30_day_mean(recovery, "skin_temp_f")
mean_spo2 <- last_30_day_mean(recovery, "spo2")
# GET WORKOUTS DATA
workouts <- get_workouts_data()
avg_workout <- get_avg_workouts_data(workouts, TRUE)
avg_workout_long <- get_avg_workouts_data(workouts)
todays_workouts <- get_todays_workout_data(workouts)
# GET SLEEP DATA
sleep <- get_sleep_data()
cycles_plot
cycles
# LIBRARIES
source("01_hk_libraries.R")
# DATA REFRESH
system("python whoop.py")
# system("Rscript --vanilla rules.R")
system("python get_events.py")
# RENPHO
# EIGHT SLEEP
# STRAVA
# HEADSPACE
# DATA SOURCE FUNCTIONS
source("02_hk_data_functions.R")
# PLOT FUNCTIONS
source("03_hk_plot_functions.R")
# TABLE FUNCTIONS
source("04_hk_table_functions.R")
# GET EVENTS DATA
events <- get_events_data()
wo_window_num <- get_wo_windows_num(events)
wo_windows <- get_wo_windows(events)
# GET WORK OUT DATA
# wo <- get_wo_schedule_data()
todays_wo <- get_todays_wo()
todays_status <- get_category_sum_data(get_workout_dates_data(range_start),
NUM_CARDIO,
NUM_MUSCULAR,
NUM_NON,
NUM_RESTORE)
wo_message <- get_wo_message(todays_wo, wo_window_num, wo_windows)
# GET CYCLES DATA
cycles <- get_cycles_data()
cycles_plot <- get_cycles_plot_data(cycles)
todays_strain_exp <- get_todays_strain_exp_data(cycles_plot)
# GET RECOVERY DATA
recovery <- get_recovery_data()
mean_rhr <- last_30_day_mean(recovery, "resting_heart_rate")
mean_hrv <- last_30_day_mean(recovery, "hrv_rmssd")
mean_st <- last_30_day_mean(recovery, "skin_temp_f")
mean_spo2 <- last_30_day_mean(recovery, "spo2")
# GET WORKOUTS DATA
workouts <- get_workouts_data()
avg_workout <- get_avg_workouts_data(workouts, TRUE)
avg_workout_long <- get_avg_workouts_data(workouts)
todays_workouts <- get_todays_workout_data(workouts)
# GET SLEEP DATA
sleep <- get_sleep_data()
strain_bar(cycles_plot,
"day_strain",
"avg_strain",
"lq_strain",
"uq_strain",
"Daily Strain")
line_plot(cycles_plot, "day_avg_heart_rate", "date", "Average Heart Rate")
cycles_plot
line_plot(cycles, "day_avg_heart_rate", "date", "Average Heart Rate")
175000*1.15
401 * 1.05
avg_workout
todays_workouts
todays_wo
cycles_plot
plot_data <- get_todays_strain_plot_data(cycles_plot, expected_strain)
# If today's workout(s) has not happened yet, add it into the graph to show the expected
expected_strain <- get_expected_strain_data(todays_wo,
todays_workouts,
avg_workout)
plot_data <- get_todays_strain_plot_data(cycles_plot, expected_strain)
plot_data
Sys.time()
hour(Sys.time())
?hour
Sys.time() + 60
Sys.time() + minutes(60)
hour(Sys.time() + minutes(60))
second(Sys.time() + minutes(60))
24 * 60 * 60
hour(Sys.time() + minutes(60)) * 60 * 60
minute(Sys.time() + minutes(60)) * 60
((hour(Sys.time() + minutes(60)) * 60 * 60) + (minute(Sys.time() + minutes(60)) * 60) + second(Sys.time() + minutes(60))) / (24 * 60 * 60)
expected_strain
cycles_plot %>%
head(1)  %>%
select(date,
day_strain,
avg_strain,
dotw)%>%
mutate(potd = ((hour(Sys.time()) * 60 * 60) +
(minute(Sys.time()) * 60) +
second(Sys.time())) /
(24 * 60 * 60),
non_wo_strain = (avg_strain - expected_strain) * (1 - potd),
additional_strain = expected_strain + day_strain)
cycles_plot %>%
head(1)  %>%
select(date,
day_strain,
avg_strain,
dotw)%>%
mutate(potd = ((hour(Sys.time()) * 60 * 60) +
(minute(Sys.time()) * 60) +
second(Sys.time())) /
(24 * 60 * 60),
non_wo_strain = (avg_strain - expected_strain) * (1 - potd),
additional_strain = expected_strain + day_strain + non_wo_strain)
cycles_plot %>%
head(1)  %>%
select(date,
day_strain,
avg_strain,
dotw)%>%
mutate(potd = ((hour(Sys.time()) * 60 * 60) +
(minute(Sys.time()) * 60) +
second(Sys.time())) /
(24 * 60 * 60),
non_wo_strain = (avg_strain - expected_strain) * (1 - potd),
additional_strain = expected_strain + day_strain + non_wo_strain)
2500 + (421 * 36)
(2500 + (421 * 36)) / 36
# LIBRARIES
source("01_hk_libraries.R")
# DATA REFRESH
system("python whoop.py")
# system("Rscript --vanilla rules.R")
system("python get_events.py")
# RENPHO
# EIGHT SLEEP
# STRAVA
# HEADSPACE
# DATA SOURCE FUNCTIONS
source("02_hk_data_functions.R")
# PLOT FUNCTIONS
source("03_hk_plot_functions.R")
# TABLE FUNCTIONS
source("04_hk_table_functions.R")
# GET EVENTS DATA
events <- get_events_data()
wo_window_num <- get_wo_windows_num(events)
wo_windows <- get_wo_windows(events)
# GET WORK OUT DATA
# wo <- get_wo_schedule_data()
todays_wo <- get_todays_wo()
todays_status <- get_category_sum_data(get_workout_dates_data(range_start),
NUM_CARDIO,
NUM_MUSCULAR,
NUM_NON,
NUM_RESTORE)
wo_message <- get_wo_message(todays_wo, wo_window_num, wo_windows)
# GET CYCLES DATA
cycles <- get_cycles_data()
cycles_plot <- get_cycles_plot_data(cycles)
todays_strain_exp <- get_todays_strain_exp_data(cycles_plot)
# GET RECOVERY DATA
recovery <- get_recovery_data()
mean_rhr <- last_30_day_mean(recovery, "resting_heart_rate")
mean_hrv <- last_30_day_mean(recovery, "hrv_rmssd")
mean_st <- last_30_day_mean(recovery, "skin_temp_f")
mean_spo2 <- last_30_day_mean(recovery, "spo2")
# GET WORKOUTS DATA
workouts <- get_workouts_data()
avg_workout <- get_avg_workouts_data(workouts, TRUE)
avg_workout_long <- get_avg_workouts_data(workouts)
todays_workouts <- get_todays_workout_data(workouts)
# GET SLEEP DATA
sleep <- get_sleep_data()
workouts
workouts %>% filter(name == "Running")
workouts %>% filter(name == "Running")
setwd("scripts")
reticulate::repl_python()
reticulate::repl_python()
