(max(distance_miles) - min(distance_miles)),
elev_norm = (elevation_miles - min(elevation_miles)) /
(max(elevation_miles) - min(elevation_miles)),
mph_norm = (avg_speed_mph - min(avg_speed_mph)) /
(max(avg_speed_mph) - min(avg_speed_mph)),
score = (dist_norm + elev_norm + mph_norm) * ifelse(treadmill == 1, 0.9, 1)) %>%
select(date,
score,
dist_norm,
elev_norm,
mph_norm,
treadmill)
wrun <- workouts %>%
filter(name == "Running") %>%
select(date,
intensity_score,
raw_intensity_score,
kilojoules,
calories,
max_heart_rate,
average_heart_rate,
distance,
altitude_gain,
altitude_change,
wo_len)
stand_runs <- stand_runs %>%
inner_join(wrun, by = "date")
stand_runs <- stand_runs %>%
mutate(score = score * 10,
score_differential = mean(score) / score,
run_by_strain = score / raw_intensity_score,
run_by_cal = score / calories,
run_by_hr = score / average_heart_rate)
stand_runs
stand_runs <- runs %>%
filter(avg_speed_mph >= 4.5) %>%
arrange(desc(date)) %>%
mutate(dist_norm = (distance_miles - min(distance_miles)) /
(max(distance_miles) - min(distance_miles)),
elev_norm = (elevation_miles - min(elevation_miles)) /
(max(elevation_miles) - min(elevation_miles)),
mph_norm = (avg_speed_mph - min(avg_speed_mph)) /
(max(avg_speed_mph) - min(avg_speed_mph)),
score = (dist_norm + elev_norm + mph_norm) * ifelse(treadmill == 1, 0.9, 1)) %>%
select(date,
score,
dist_norm,
elev_norm,
mph_norm,
treadmill)
wrun <- workouts %>%
filter(name == "Running") %>%
select(date,
intensity_score,
raw_intensity_score,
kilojoules,
calories,
max_heart_rate,
average_heart_rate,
distance,
altitude_gain,
altitude_change,
wo_len)
stand_runs <- stand_runs %>%
inner_join(wrun, by = "date")
stand_runs <- stand_runs %>%
mutate(score = score * 10,
score_differential = mean(score) / score,
run_by_strain = score_differential / raw_intensity_score,
run_by_cal = score_differential / calories,
run_by_hr = score_differential / average_heart_rate)
hr <- ggplot(stand_runs, aes(x = date, y = run_by_hr)) +
geom_point() +
geom_smooth()
cal <- ggplot(stand_runs, aes(x = date, y = run_by_cal)) +
geom_point() +
geom_smooth()
str <- ggplot(stand_runs, aes(x = date, y = run_by_strain)) +
geom_point() +
geom_smooth()
pstr <- ggplot(stand_runs, aes(x = date, y = raw_intensity_score)) +
geom_point() +
geom_smooth()
pcal <- ggplot(stand_runs, aes(x = date, y = calories)) +
geom_point() +
geom_smooth()
phr <- ggplot(stand_runs, aes(x = date, y = average_heart_rate)) +
geom_point() +
geom_smooth()
scr <- ggplot(stand_runs, aes(x = date, y = score)) +
geom_point() +
geom_smooth()
grid.arrange(hr, cal, str,
phr, pcal, pstr,
scr, scr, scr,
nrow = 3)
scr <- ggplot(stand_runs, aes(x = date, y = score_differential)) +
geom_point() +
geom_smooth()
grid.arrange(hr, cal, str,
phr, pcal, pstr,
scr, scr, scr,
nrow = 3)
stand_runs
mean(stand_runs$score)
score / mean(stand_runs$score)
stand_runs <- runs %>%
filter(avg_speed_mph >= 4.5) %>%
arrange(desc(date)) %>%
mutate(dist_norm = (distance_miles - min(distance_miles)) /
(max(distance_miles) - min(distance_miles)),
elev_norm = (elevation_miles - min(elevation_miles)) /
(max(elevation_miles) - min(elevation_miles)),
mph_norm = (avg_speed_mph - min(avg_speed_mph)) /
(max(avg_speed_mph) - min(avg_speed_mph)),
score = (dist_norm + elev_norm + mph_norm) * ifelse(treadmill == 1, 0.9, 1)) %>%
select(date,
score,
dist_norm,
elev_norm,
mph_norm,
treadmill)
wrun <- workouts %>%
filter(name == "Running") %>%
select(date,
intensity_score,
raw_intensity_score,
kilojoules,
calories,
max_heart_rate,
average_heart_rate,
distance,
altitude_gain,
altitude_change,
wo_len)
stand_runs <- stand_runs %>%
inner_join(wrun, by = "date")
stand_runs <- stand_runs %>%
mutate(score = score * 10,
score_differential =  score / mean(score),
run_by_strain = score_differential / raw_intensity_score,
run_by_cal = score_differential / calories,
run_by_hr = score_differential / average_heart_rate)
stand_runs
mean(stand_runs$score) * 0.5539088
mean_run <- ggplot(stand_runs, aes(x = date, y = mean(score))) +
geom_line()
ggplot(stand_runs, aes(x = date, y = mean(score))) +
geom_line()
ggplot(stand_runs, aes(x = date, y = score_differential)) +
geom_line()
ggplot(stand_runs, aes(x = date, y = score_differential)) +
geom_point()
mean_run <- ggplot(stand_runs, aes(x = date)) +
geom_line(aes(y = mean(score))) +
geom_point(aes(y = score_differential))
ggplot(stand_runs, aes(x = date)) +
geom_line(aes(y = mean(score))) +
geom_point(aes(y = score_differential))
stand_runs
mean_run <- ggplot(stand_runs, aes(x = date)) +
geom_hline(yintercept = 1) +
geom_point(aes(y = score_differential))
ggplot(stand_runs, aes(x = date)) +
geom_hline(yintercept = 1) +
geom_point(aes(y = score_differential))
mean_run <- ggplot(stand_runs, aes(x = date)) +
geom_hline(yintercept = 1, color = "red") +
geom_point(aes(y = score_differential))
ggplot(stand_runs, aes(x = date)) +
geom_hline(yintercept = 1, color = "red") +
geom_point(aes(y = score_differential))
ggplot(stand_runs, aes(x = date, y = score_differential)) +
geom_hline(yintercept = 1, color = "red") +
geom_point()
mean_run <- ggplot(stand_runs, aes(x = date, y = score_differential)) +
geom_hline(yintercept = 1, color = "red") +
geom_point() +
geom_smooth()
ggplot(stand_runs, aes(x = date, y = score_differential)) +
geom_hline(yintercept = 1, color = "red") +
geom_point() +
geom_smooth()
rbs <- ggplot(stand_runs, aes(x = date, y = run_by_strain)) +
geom_point() +
geom_smooth()
rbc <- ggplot(stand_runs, aes(x = date, y = run_by_cal)) +
geom_point() +
geom_smooth()
rbhr <- ggplot(stand_runs, aes(x = date, y = run_by_cal)) +
geom_point() +
geom_smooth()
stand_runs <- runs %>%
filter(avg_speed_mph >= 4.5) %>%
arrange(desc(date)) %>%
mutate(dist_norm = (distance_miles - min(distance_miles)) /
(max(distance_miles) - min(distance_miles)),
elev_norm = (elevation_miles - min(elevation_miles)) /
(max(elevation_miles) - min(elevation_miles)),
mph_norm = (avg_speed_mph - min(avg_speed_mph)) /
(max(avg_speed_mph) - min(avg_speed_mph)),
score = (dist_norm + elev_norm + mph_norm) * ifelse(treadmill == 1, 0.9, 1)) %>%
select(date,
score,
dist_norm,
elev_norm,
mph_norm,
treadmill)
wrun <- workouts %>%
filter(name == "Running") %>%
select(date,
intensity_score,
raw_intensity_score,
kilojoules,
calories,
max_heart_rate,
average_heart_rate,
distance,
altitude_gain,
altitude_change,
wo_len)
stand_runs <- stand_runs %>%
inner_join(wrun, by = "date")
stand_runs <- stand_runs %>%
mutate(score = score * 10,
score_differential =  score / mean(score),
run_by_strain = raw_intensity_score / score_differential,
run_by_cal = calories / score_differential,
run_by_hr =  average_heart_rate / score_differential)
mean_run <- ggplot(stand_runs, aes(x = date, y = score_differential)) +
geom_hline(yintercept = 1, color = "red") +
geom_point() +
geom_smooth()
rbs <- ggplot(stand_runs, aes(x = date, y = run_by_strain)) +
geom_point() +
geom_smooth()
rbc <- ggplot(stand_runs, aes(x = date, y = run_by_cal)) +
geom_point() +
geom_smooth()
rbhr <- ggplot(stand_runs, aes(x = date, y = run_by_cal)) +
geom_point() +
geom_smooth()
grid.arrange(rbs, rbc, rbhr,
mean_run, mean_run, mean_run,
nrow = 2)
rbhr <- ggplot(stand_runs, aes(x = date, y = run_by_hr)) +
geom_point() +
geom_smooth()
grid.arrange(rbs, rbc, rbhr,
mean_run, mean_run, mean_run,
nrow = 2)
grid.arrange(rbs, rbc, rbhr,
str, cal, hr,
mean_run, mean_run, mean_run,
nrow = 3)
mean_run <- ggplot(stand_runs, aes(x = date, y = score_differential)) +
geom_hline(yintercept = 1, color = "red") +
geom_point() +
geom_smooth()
rbs <- ggplot(stand_runs, aes(x = date, y = run_by_strain)) +
geom_point() +
geom_smooth()
str <- ggplot(stand_runs, aes(x = date, y = raw_intensity_score)) +
geom_point() +
geom_smooth()
rbc <- ggplot(stand_runs, aes(x = date, y = run_by_cal)) +
geom_point() +
geom_smooth()
cal <- ggplot(stand_runs, aes(x = date, y = calories)) +
geom_point() +
geom_smooth()
rbhr <- ggplot(stand_runs, aes(x = date, y = run_by_hr)) +
geom_point() +
geom_smooth()
hr <- ggplot(stand_runs, aes(x = date, y = average_heart_rate)) +
geom_point() +
geom_smooth()
grid.arrange(rbs, rbc, rbhr,
str, cal, hr,
mean_run, mean_run, mean_run,
nrow = 3)
# LIBRARIES
source("01_hk_libraries.R")
# DATA REFRESH
system("python whoop.py")
# system("Rscript --vanilla rules.R")
system("python get_events.py")
# RENPHO
# EIGHT SLEEP
# STRAVA
# HEADSPACE
# DATA SOURCE FUNCTIONS
source("02_hk_data_functions.R")
# PLOT FUNCTIONS
source("03_hk_plot_functions.R")
# TABLE FUNCTIONS
source("04_hk_table_functions.R")
# GET EVENTS DATA
events <- get_events_data()
wo_window_num <- get_wo_windows_num(events)
wo_windows <- get_wo_windows(events)
# GET WORK OUT DATA
# wo <- get_wo_schedule_data()
todays_wo <- get_todays_wo()
todays_status <- get_category_sum_data(get_workout_dates_data(range_start),
NUM_CARDIO,
NUM_MUSCULAR,
NUM_NON,
NUM_RESTORE)
wo_message <- get_wo_message(todays_wo, wo_window_num, wo_windows)
# GET CYCLES DATA
cycles <- get_cycles_data()
cycles_plot <- get_cycles_plot_data(cycles)
todays_strain_exp <- get_todays_strain_exp_data(cycles_plot)
# GET RECOVERY DATA
recovery <- get_recovery_data()
mean_rhr <- last_30_day_mean(recovery, "resting_heart_rate")
mean_hrv <- last_30_day_mean(recovery, "hrv_rmssd")
mean_st <- last_30_day_mean(recovery, "skin_temp_f")
mean_spo2 <- last_30_day_mean(recovery, "spo2")
# GET WORKOUTS DATA
workouts <- get_workouts_data()
avg_workout <- get_avg_workouts_data(workouts, TRUE)
avg_workout_long <- get_avg_workouts_data(workouts)
todays_workouts <- get_todays_workout_data(workouts)
# GET SLEEP DATA
sleep <- get_sleep_data()
cycles_plot
cycles
# LIBRARIES
source("01_hk_libraries.R")
# DATA REFRESH
system("python whoop.py")
# system("Rscript --vanilla rules.R")
system("python get_events.py")
# RENPHO
# EIGHT SLEEP
# STRAVA
# HEADSPACE
# DATA SOURCE FUNCTIONS
source("02_hk_data_functions.R")
# PLOT FUNCTIONS
source("03_hk_plot_functions.R")
# TABLE FUNCTIONS
source("04_hk_table_functions.R")
# GET EVENTS DATA
events <- get_events_data()
wo_window_num <- get_wo_windows_num(events)
wo_windows <- get_wo_windows(events)
# GET WORK OUT DATA
# wo <- get_wo_schedule_data()
todays_wo <- get_todays_wo()
todays_status <- get_category_sum_data(get_workout_dates_data(range_start),
NUM_CARDIO,
NUM_MUSCULAR,
NUM_NON,
NUM_RESTORE)
wo_message <- get_wo_message(todays_wo, wo_window_num, wo_windows)
# GET CYCLES DATA
cycles <- get_cycles_data()
cycles_plot <- get_cycles_plot_data(cycles)
todays_strain_exp <- get_todays_strain_exp_data(cycles_plot)
# GET RECOVERY DATA
recovery <- get_recovery_data()
mean_rhr <- last_30_day_mean(recovery, "resting_heart_rate")
mean_hrv <- last_30_day_mean(recovery, "hrv_rmssd")
mean_st <- last_30_day_mean(recovery, "skin_temp_f")
mean_spo2 <- last_30_day_mean(recovery, "spo2")
# GET WORKOUTS DATA
workouts <- get_workouts_data()
avg_workout <- get_avg_workouts_data(workouts, TRUE)
avg_workout_long <- get_avg_workouts_data(workouts)
todays_workouts <- get_todays_workout_data(workouts)
# GET SLEEP DATA
sleep <- get_sleep_data()
cycles_plot
479.82 - 47.82
library(lubridate)
12000 * 1.1327
12000 * 1.1327
12000 * 1.1327^3
165000 * 1.2
# LIBRARIES
source("01_hk_libraries.R")
# DATA REFRESH
system("python whoop.py")
# system("Rscript --vanilla rules.R")
system("python get_events.py")
# RENPHO
# EIGHT SLEEP
# STRAVA
# HEADSPACE
# DATA SOURCE FUNCTIONS
source("02_hk_data_functions.R")
# PLOT FUNCTIONS
source("03_hk_plot_functions.R")
# TABLE FUNCTIONS
source("04_hk_table_functions.R")
# GET EVENTS DATA
events <- get_events_data()
wo_window_num <- get_wo_windows_num(events)
wo_windows <- get_wo_windows(events)
# GET WORK OUT DATA
# wo <- get_wo_schedule_data()
todays_wo <- get_todays_wo()
todays_status <- get_category_sum_data(get_workout_dates_data(range_start),
NUM_CARDIO,
NUM_MUSCULAR,
NUM_NON,
NUM_RESTORE)
wo_message <- get_wo_message(todays_wo, wo_window_num, wo_windows)
# GET CYCLES DATA
cycles <- get_cycles_data()
cycles_plot <- get_cycles_plot_data(cycles)
todays_strain_exp <- get_todays_strain_exp_data(cycles_plot)
# GET RECOVERY DATA
recovery <- get_recovery_data()
mean_rhr <- last_30_day_mean(recovery, "resting_heart_rate")
mean_hrv <- last_30_day_mean(recovery, "hrv_rmssd")
mean_st <- last_30_day_mean(recovery, "skin_temp_f")
mean_spo2 <- last_30_day_mean(recovery, "spo2")
# GET WORKOUTS DATA
workouts <- get_workouts_data()
avg_workout <- get_avg_workouts_data(workouts, TRUE)
avg_workout_long <- get_avg_workouts_data(workouts)
todays_workouts <- get_todays_workout_data(workouts)
# GET SLEEP DATA
sleep <- get_sleep_data()
get_workout_dates_data(range_start)
workout_dates %>%
arrange(date)
range_start
get_workouts_data() %>%
filter(date >= range_start) %>%
left_join(get_sports(), by = "name") %>%
mutate(new_cat = str_sub(category, 1, 5)) %>%
group_by(date) %>%
summarise(workouts_completed = paste0(name, collapse = " + "),
category = paste0(new_cat, collapse = " + "),
act_strain = sum(raw_intensity_score)) %>%
full_join(get_cycles_data(), by = c("date" = "date")) %>%
filter(date >= range_start &
date <= Sys.Date() - days(1)) %>%
select(date, workouts_completed, category, act_strain, day_strain) %>%
mutate(workouts_completed = ifelse(is.na(workouts_completed),
"Other - Recovery",
workouts_completed),
category = ifelse(is.na(category),
str_sub("restorative", 1, 5),
category),
day_strain = ifelse(is.na(day_strain), 0, day_strain * 1000),
avg_strain = last_30_day_ma(get_cycles_data(),
"day_strain",
"date",
range_start,
Sys.Date() - days(1)) * 1000,
over_avg = ifelse(day_strain >= avg_strain, 1, -1),
plus_minus = cumsum(over_avg),
category_restore = case_when(
workouts_completed == "Walking" & act_strain < 1 ~ TRUE,
category == "resto" ~ TRUE,
1 == 1 ~ FALSE),
category_muscular = ifelse(grepl("muscu", category), TRUE, FALSE),
category_cardio = ifelse(grepl("cardi", category),
TRUE, FALSE),
category_non = ifelse(grepl("non-c", category) &
!(workouts_completed == "Walking" &
act_strain < 1), TRUE, FALSE))
1400 * 6
# Source Libraries Script
source("01_hkv2_libraries.R")
# Refresh Data
system("/bin/bash 02_hkv2_data_refresh.sh")
# Refresh Data
system("/bin/bash 02_hkv2_data_refresh.sh 2>&1 02_hkv2_data_refresh.log")
# Refresh Data
system("/bin/bash 02_hkv2_data_refresh.sh > 02_hkv2_data_refresh.log 2>&1")
source("03_01_hkv2_event_data_functions.R")
# GET EVENTS DATA
events <- get_events_data()
library(readr)
# GET EVENTS DATA
events <- get_events_data()
library(dplyr)
# GET EVENTS DATA
events <- get_events_data()
library(lubridate)
# GET EVENTS DATA
events <- get_events_data()
events
# Source Libraries Script
source("01_hkv2_libraries.R")
source("03_01_hkv2_event_data_functions.R")
events
# Refresh Data
system("/bin/bash 02_hkv2_data_refresh.sh")
# GET EVENTS DATA
events <- get_events_data()
events
events <- read_csv("../data/calendar_events.csv")
setwd("scripts/")
events <- read_csv("../data/calendar_events.csv")
events
events
reticulate::repl_python()
# GET EVENTS DATA
events <- get_events_data()
# Source Libraries Script
source("01_hkv2_libraries.R")
# Refresh Data
system("/bin/bash 02_hkv2_data_refresh.sh")
reticulate::repl_python()
